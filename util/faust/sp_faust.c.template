typedef struct {
    void *faust;
    int argpos;
    UTFLOAT *args[{{.Count}}];
    {{range $index, $element := .Params}}UTFLOAT *{{$element}};
    {{end}}
} ut_{{.Name}};

int ut_{{.Name}}_create(ut_{{.Name}} **p);
int ut_{{.Name}}_destroy(ut_{{.Name}} **p);
int ut_{{.Name}}_init(ut_data *sp, ut_{{.Name}} *p);
int ut_{{.Name}}_compute(ut_data *sp, ut_{{.Name}} *p, UTFLOAT *in, UTFLOAT *out);


static void addHorizontalSlider(void* ui_interface, const char* label, FAUSTFLOAT* zone, FAUSTFLOAT init, FAUSTFLOAT min, FAUSTFLOAT max, FAUSTFLOAT step)
{
    ut_{{.Name}} *p = ui_interface;
    p->args[p->argpos] = zone;
    p->argpos++;
}

int ut_{{.Name}}_create(ut_{{.Name}} **p)
{
    *p = malloc(sizeof(ut_{{.Name}}));
    return UT_OK;
}

int ut_{{.Name}}_destroy(ut_{{.Name}} **p)
{
    ut_{{.Name}} *pp = *p;
    {{.Name}} *dsp = pp->faust;
    delete{{.Name}} (dsp);
    free(*p);
    return UT_OK;
}

int ut_{{.Name}}_init(ut_data *sp, ut_{{.Name}} *p)
{
    {{.Name}} *dsp = new{{.Name}}(); 
    UIGlue UI;
    p->argpos = 0;
    UI.addHorizontalSlider= addHorizontalSlider;
    UI.uiInterface = p;
    buildUserInterface{{.Name}}(dsp, &UI);
    init{{.Name}}(dsp, sp->sr);

    {{range $index, $element := .Params}} 
    p->{{$element}} = p->args[{{$index}}];{{end}}

    p->faust = dsp;
    return UT_OK;
}

int ut_{{.Name}}_compute(ut_data *sp, ut_{{.Name}} *p, UTFLOAT *in, UTFLOAT *out) 
{

    {{.Name}} *dsp = p->faust;
    UTFLOAT out1 = 0;
    UTFLOAT *faust_out[] = {&out1};
    UTFLOAT *faust_in[] = {in};
    compute{{.Name}}(dsp, 1, faust_in, faust_out);

    *out = out1;
    return UT_OK;
}
